version: "3"
services:
  # The Flask application container
  flask_app:
    build: ./
    ports:
      - "10000:5000"
    container_name: flask
    secrets:
      - mysql_password
    environment:
      - DD_SERVICE=flask
      - DD_ENV=docker
      - DD_VERSION=1.0.0
      - MYSQL_USER=mysql
      - MYSQL_DATABASE=real_estate
      - MYSQL_PASSWORD=/run/secrets/mysql_password
  # The MySQL database container
  db:
    image: mysql:latest
    container_name: mysql
    volumes:
      # this volume keeps data persistent
      - ./dbdata/db:/var/lib/mysql
      # this volume initializes the database with the sql schema file
      - ./dbdata/init-script.sql:/docker-entrypoint-initdb.d/init-script.sql
      # this volume starts up the database with DBM required settings
      - ./dbconfig/conf.d:/etc/mysql/conf.d
      # this volume provides a directory for logs to be written into
      - ./dbdata/log/mysql:/var/log/mysql
    restart: always
    ports:
      - 3306:3306
    secrets:
      - mysql_password
      - mysql_root_password
    # The environment variables read into the container by the mysql
    # image is specially built to understand the _FILE ending which
    # tells the image to read in the values from the files in the
    # /run/secrets in-memory temporary filesystem and then use those
    # values to populate the environment variable without the _FILE
    # ending, for example: the value in the file shown in 
    # MYSQL_PASSWORD_FILE is used to set the MYSQL_PASSWORD variable
    environment:
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/mysql_root_password
      - MYSQL_PASSWORD_FILE=/run/secrets/mysql_password
      - MYSQL_USER=mysql
      - MYSQL_DATABASE=real_estate
  # The Datadog agent container
  datadog:
    image: "gcr.io/datadoghq/agent:latest"
    container_name: datadog
    env_file:
      - ~/sandbox.docker.env
    environment:
      - DD_APM_ENABLED=false
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_ENV=docker
      - DD_HOSTNAME=et-testvm
      - DD_HEALTH_PORT=5555
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_LOGS_CONFIG_COMPRESSION_LEVEL=6
      - DD_LOGS_ENABLED=true
      - DD_LOG_FORMAT_JSON=true
      - DD_LOG_LEVEL=info
      - DD_PROCESS_AGENT_ENABLED=true
      - DD_SYSTEM_PROBE_ENABLED=true
      - DD_SYSTEM_PROBE_SERVICE_MONITORING_ENABLED=true
      - DD_TAGS=owner:et cloud_provider:onprem system:mac ddmonitor:true availability:true performance:false
      - HOST_ROOT=/host/root
    ports:
      - 8125:8125/udp
      - 8126:8126/tcp
    volumes:
      - /etc/os-release:/host/etc/os-release:ro
      - /etc/group:/etc/group:ro
      - /:/host/root:ro
      - /etc/passwd:/etc/passwd:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /proc/:/host/proc/:ro
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /sys/kernel/debug:/sys/kernel/debug
    cap_add:
      - NET_BROADCAST
      - NET_ADMIN
      - NET_RAW
      - IPC_LOCK
      - CHOWN
      - SYS_ADMIN
      - SYS_RESOURCE
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined

# This is where the password values are kept secret in files 
# on the host system that need to exist to be read in when
# the mysql image is used to start up in a container.
secrets:
  mysql_password:
    file: ./secrets/mysql_password
  mysql_root_password:
    file: ./secrets/mysql_root_password
